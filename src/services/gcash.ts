/**
 * Minimal interface for the data needed from the frontend to initiate payment.
 */
export interface GcashPaymentInitiationRequest {
  /**
   * The amount to be paid in PHP.
   */
  amount: number;
  /**
   * Optional description of the payment (e.g., "CES Membership Fee").
   */
  description?: string;
  /**
   * Optional metadata to pass along, like selected memberships, email, section, student ID, phone number.
   */
  metadata?: {
      email?: string;
      phoneNumber?: string; // User's phone number from the form
      section?: string;
      studentId?: string;
      ces?: boolean; // Add membership types here
      icso?: boolean;
      subOrg?: string | null;
      [key: string]: any; // Allow other arbitrary data
  };
}


/**
 * Represents the expected response from the (mocked) backend API
 * after initiating the GCash payment process.
 */
export interface GcashPaymentInitiationResponse {
  /**
   * The URL to redirect the user to for completing the payment via GCash.
   * In a real scenario, this would be a URL provided by the GCash API.
   * In this mock, it will simulate a GCash cashier page URL.
   */
  paymentUrl: string;
  /**
   * Unique identifier for the payment request generated by our system/backend.
   */
  paymentRequestId: string;
   /**
   * Transaction ID or Payment ID if available immediately (might be set later via webhook).
   * For mock purposes, we can generate one.
   */
   transactionId?: string;
}

// --- Interfaces based on GCash API examples ---

interface GcashAmount {
    currency: string; // e.g., "PHP" or "USD"
    value: string; // Amount as string (e.g., "10000" for 100.00 PHP/USD, value * 100)
}

interface GcashPayRequest {
    partnerId: string;
    paymentRequestId: string;
    paymentOrderTitle: string;
    productCode: string;
    mcc: string; // Merchant Category Code
    paymentAmount: GcashAmount;
    paymentFactor: {
        isCashierPayment: boolean;
    };
    paymentReturnUrl: string; // URL user is sent back to after payment attempt
    paymentNotifyUrl: string; // URL GCash sends backend notification to
    extraParams?: Record<string, string>; // Example showed JSON stringified Order object here
    extendInfo?: string; // JSON string for additional merchant info
    envInfo?: {
        osType?: string; // e.g., "IOS", "ANDROID", "WEB"
        terminalType?: string; // e.g., "APP", "WEB"
    };
}

interface GcashPayResponseResult {
    resultCode: string; // e.g., "SUCCESS", "ACCEPT", "FAIL"
    resultStatus: string; // e.g., "S", "A", "F", "U" (Unknown)
    resultMessage: string;
}

interface GcashPaySuccessResponse {
    result: GcashPayResponseResult;
    paymentId?: string; // GCash's internal payment ID
    actionForm?: {
        actionFormType: "REDIRECTION";
        redirectionUrl: string; // The actual URL to redirect the user to
    };
}

// Interface for payment query response (simplified)
interface GcashPaymentQueryResponse {
    result: GcashPayResponseResult;
    paymentId?: string;
    paymentRequestId?: string;
    paymentTime?: string; // ISO format like "2020-01-01T12:01:01+08:30"
    paymentAmount?: GcashAmount;
    paymentStatus?: "SUCCESS" | "FAIL" | "PROCESSING" | "PENDING" | "CLOSED"; // Possible statuses
    paymentFailReason?: string;
}

// --- End of GCash API interfaces ---


/**
 * Asynchronously initiates a GCash payment and returns the payment URL.
 * This function should typically call your backend API, which securely interacts with GCash.
 * This is a MOCK implementation that simulates the flow.
 *
 * @param paymentDetails The minimal payment details from the frontend.
 * @returns A promise that resolves to a GcashPaymentInitiationResponse containing the redirection URL.
 * @throws Will throw an error if the payment initiation fails.
 */
export async function initiateGcashPayment(paymentDetails: GcashPaymentInitiationRequest): Promise<GcashPaymentInitiationResponse> {
  console.log("Initiating GCash payment with frontend details:", paymentDetails);

  // **** MOCK IMPLEMENTATION ****

  // 1. Simulate backend generating necessary IDs and data
  const partnerId = "P_MOCK_CES_ANTIPOLO"; // Mock Partner ID from example format
  const paymentRequestId = `CES_${Date.now()}`; // Mock Payment Request ID
  const productCode = "CES_MEMBERSHIP"; // Specific product code for membership
  const mcc = "8299"; // Merchant Category Code for Educational Services
  const paymentOrderTitle = paymentDetails.description || "ICCT CES Membership";

  // Construct amount in the format GCash expects (string, value * 100 for cents)
  const paymentAmount: GcashAmount = {
      currency: "PHP",
      // Convert PHP amount to string representing cents (e.g., 55.00 PHP -> "5500")
      value: Math.round(paymentDetails.amount * 100).toString(),
  };


  // Define return and notify URLs (should be actual endpoints in a real app)
   const baseReturnUrl = typeof window !== 'undefined'
       ? `${window.location.origin}/payment-confirmation`
       : 'http://localhost:9002/payment-confirmation'; // Fallback for server-side generation

  const paymentNotifyUrl = typeof window !== 'undefined'
       ? `${window.location.origin}/api/gcash/notify` // Example webhook endpoint
       : 'http://localhost:9002/api/gcash/notify';


   // --- Construct the FINAL return URL with parameters for the confirmation page ---
   // This is the URL GCash *should* redirect the user BACK to AFTER they attempt payment.
    const finalReturnUrlParams = new URLSearchParams();
    // Simulate GCash adding status and transaction details upon return.
    // For the MOCK, we assume SUCCESS. In reality, GCash appends this info.
    finalReturnUrlParams.set('status', 'success');
    finalReturnUrlParams.set('amount', paymentDetails.amount.toString());
    finalReturnUrlParams.set('paymentRequestId', paymentRequestId); // Pass our generated ID back
    const mockGcashPaymentId = `GCASH_${Date.now() + 100}`; // Simulate GCash's internal payment ID
    finalReturnUrlParams.set('transactionId', mockGcashPaymentId); // Pass the simulated GCash ID back

    // Include metadata in the return URL for the confirmation page
    if (paymentDetails.metadata) {
       if (paymentDetails.metadata.email) finalReturnUrlParams.set('email', paymentDetails.metadata.email);
       if (paymentDetails.metadata.phoneNumber) finalReturnUrlParams.set('phoneNumber', paymentDetails.metadata.phoneNumber);
       if (paymentDetails.metadata.section) finalReturnUrlParams.set('section', paymentDetails.metadata.section);
       if (paymentDetails.metadata.studentId) finalReturnUrlParams.set('studentId', paymentDetails.metadata.studentId);
       if (paymentDetails.metadata.ces) finalReturnUrlParams.set('ces', 'true');
       if (paymentDetails.metadata.icso) finalReturnUrlParams.set('icso', 'true');
       if (paymentDetails.metadata.subOrg) finalReturnUrlParams.set('subOrg', paymentDetails.metadata.subOrg);
       // DO NOT include the GCash number in the return URL
    }
    // This is the URL the user lands on AFTER paying/cancelling on GCash
    const finalPaymentReturnUrl = `${baseReturnUrl}?${finalReturnUrlParams.toString()}`;
   // --- End final return URL construction ---


  // 2. Simulate constructing the request body for the actual GCash API call
  const mockGcashApiRequest: GcashPayRequest = {
      partnerId: partnerId,
      paymentRequestId: paymentRequestId,
      paymentOrderTitle: paymentOrderTitle,
      productCode: productCode,
      mcc: mcc,
      paymentAmount: paymentAmount,
      paymentFactor: { isCashierPayment: true }, // True to redirect to GCash cashier page
      paymentReturnUrl: finalPaymentReturnUrl, // URL GCash redirects user back to
      paymentNotifyUrl: paymentNotifyUrl, // Backend webhook URL
      // extraParams: { ORDER: JSON.stringify({ referenceOrderId: `ORD_${paymentRequestId}`, orderAmount: JSON.stringify(paymentAmount) }) }, // Example from docs
      extendInfo: JSON.stringify({ customerBelongsTo: "ICCT_CES_ANTIPOLO", /* other merchant info */ }), // Pass essential metadata
      envInfo: { terminalType: "WEB" } // Indicate web payment
  };
  console.log("Simulated GCash API Request Body:", mockGcashApiRequest);

  // 3. Simulate API call delay
  await new Promise(resolve => setTimeout(resolve, 1000)); // Reduced delay

  // 4. Simulate a successful *initiation* response from GCash API (status 'A' for 'ACCEPT'/Redirection)
   // Simulate the GCash cashier page URL. This is where the user *actually* pays.
   // Based on example: "http://www.merchant.com/cashier?orderId=xxxxxxx"
   // We'll construct a similar *mock* URL. This URL would be provided by the *real* GCash API.
   const mockCashierUrl = `https://pay.gcash.com/mock-cashier?paymentRequestId=${paymentRequestId}&partnerId=${partnerId}&amount=${paymentAmount.value}&returnUrl=${encodeURIComponent(finalPaymentReturnUrl)}`; // Simplified mock cashier URL

  const mockApiResponse: GcashPaySuccessResponse = {
      result: {
          resultCode: "ACCEPT",
          resultStatus: "A", // Indicates redirection is needed
          resultMessage: "accept"
      },
      paymentId: mockGcashPaymentId, // Provide the simulated GCash ID if known at this stage
      actionForm: {
          actionFormType: "REDIRECTION",
          // This is the crucial URL to send the user to the GCash payment page
          redirectionUrl: mockCashierUrl
      }
  };
  console.log("Simulated GCash API Response:", mockApiResponse);

  // 5. Extract the GCash cashier redirection URL and return it to the frontend
   if (mockApiResponse.result.resultStatus === 'A' && mockApiResponse.actionForm?.redirectionUrl) {
     return {
       paymentUrl: mockApiResponse.actionForm.redirectionUrl, // Send the GCash cashier URL to the frontend
       paymentRequestId: paymentRequestId,
       transactionId: mockApiResponse.paymentId // Include transaction ID from the response
     };
   } else {
     // Simulate failure during initiation
     console.error("Mock GCash API Initiation Error:", mockApiResponse.result.resultMessage);
     throw new Error(`Mock GCash Error: ${mockApiResponse.result.resultMessage || 'Failed to get redirection URL'}`);
   }

  // Simulate network/API failure (uncomment to test error handling)
  // console.error("Simulating GCash API Network Error");
  // throw new Error("Mock GCash API Error: Network connection failed");
}
